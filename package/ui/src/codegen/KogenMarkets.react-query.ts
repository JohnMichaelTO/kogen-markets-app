/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  Timestamp,
  Uint64,
  Uint128,
  Addr,
  InstantiateMsg,
  ExecuteMsg,
  QueryMsg,
  ArrayOfOrdersResponse,
  OrdersResponse,
  OrderBookItem,
  Config,
  LockedAmountResponse,
  PositionResponse,
  PositionState,
  Settlement,
  Position,
} from "./KogenMarkets.types";
import {
  KogenMarketsQueryClient,
  KogenMarketsClient,
} from "./KogenMarkets.client";
export const kogenMarketsQueryKeys = {
  contract: [
    {
      contract: "kogenMarkets",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      { ...kogenMarketsQueryKeys.contract[0], address: contractAddress },
    ] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...kogenMarketsQueryKeys.address(contractAddress)[0],
        method: "config",
        args,
      },
    ] as const,
  bids: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...kogenMarketsQueryKeys.address(contractAddress)[0],
        method: "bids",
        args,
      },
    ] as const,
  asks: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      {
        ...kogenMarketsQueryKeys.address(contractAddress)[0],
        method: "asks",
        args,
      },
    ] as const,
  lockedAmount: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...kogenMarketsQueryKeys.address(contractAddress)[0],
        method: "locked_amount",
        args,
      },
    ] as const,
  position: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...kogenMarketsQueryKeys.address(contractAddress)[0],
        method: "position",
        args,
      },
    ] as const,
};
export const kogenMarketsQueries = {
  config: <TData = Config>({
    client,
    options,
  }: KogenMarketsConfigQuery<TData>): UseQueryOptions<
    Config,
    Error,
    TData
  > => ({
    queryKey: kogenMarketsQueryKeys.config(client?.contractAddress),
    queryFn: () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  bids: <TData = ArrayOfOrdersResponse>({
    client,
    args,
    options,
  }: KogenMarketsBidsQuery<TData>): UseQueryOptions<
    ArrayOfOrdersResponse,
    Error,
    TData
  > => ({
    queryKey: kogenMarketsQueryKeys.bids(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.bids({
            price: args.price,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  asks: <TData = ArrayOfOrdersResponse>({
    client,
    args,
    options,
  }: KogenMarketsAsksQuery<TData>): UseQueryOptions<
    ArrayOfOrdersResponse,
    Error,
    TData
  > => ({
    queryKey: kogenMarketsQueryKeys.asks(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.asks({
            price: args.price,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  lockedAmount: <TData = LockedAmountResponse>({
    client,
    args,
    options,
  }: KogenMarketsLockedAmountQuery<TData>): UseQueryOptions<
    LockedAmountResponse,
    Error,
    TData
  > => ({
    queryKey: kogenMarketsQueryKeys.lockedAmount(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.lockedAmount({
            owner: args.owner,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  position: <TData = PositionResponse>({
    client,
    args,
    options,
  }: KogenMarketsPositionQuery<TData>): UseQueryOptions<
    PositionResponse,
    Error,
    TData
  > => ({
    queryKey: kogenMarketsQueryKeys.position(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.position({
            owner: args.owner,
          })
        : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
};
export interface KogenMarketsReactQuery<TResponse, TData = TResponse> {
  client: KogenMarketsQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface KogenMarketsPositionQuery<TData>
  extends KogenMarketsReactQuery<PositionResponse, TData> {
  args: {
    owner: Addr;
  };
}
export function useKogenMarketsPositionQuery<TData = PositionResponse>({
  client,
  args,
  options,
}: KogenMarketsPositionQuery<TData>) {
  return useQuery<PositionResponse, Error, TData>(
    kogenMarketsQueryKeys.position(client?.contractAddress, args),
    () =>
      client
        ? client.position({
            owner: args.owner,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface KogenMarketsLockedAmountQuery<TData>
  extends KogenMarketsReactQuery<LockedAmountResponse, TData> {
  args: {
    owner: Addr;
  };
}
export function useKogenMarketsLockedAmountQuery<TData = LockedAmountResponse>({
  client,
  args,
  options,
}: KogenMarketsLockedAmountQuery<TData>) {
  return useQuery<LockedAmountResponse, Error, TData>(
    kogenMarketsQueryKeys.lockedAmount(client?.contractAddress, args),
    () =>
      client
        ? client.lockedAmount({
            owner: args.owner,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface KogenMarketsAsksQuery<TData>
  extends KogenMarketsReactQuery<ArrayOfOrdersResponse, TData> {
  args: {
    price?: Uint128;
  };
}
export function useKogenMarketsAsksQuery<TData = ArrayOfOrdersResponse>({
  client,
  args,
  options,
}: KogenMarketsAsksQuery<TData>) {
  return useQuery<ArrayOfOrdersResponse, Error, TData>(
    kogenMarketsQueryKeys.asks(client?.contractAddress, args),
    () =>
      client
        ? client.asks({
            price: args.price,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface KogenMarketsBidsQuery<TData>
  extends KogenMarketsReactQuery<ArrayOfOrdersResponse, TData> {
  args: {
    price?: Uint128;
  };
}
export function useKogenMarketsBidsQuery<TData = ArrayOfOrdersResponse>({
  client,
  args,
  options,
}: KogenMarketsBidsQuery<TData>) {
  return useQuery<ArrayOfOrdersResponse, Error, TData>(
    kogenMarketsQueryKeys.bids(client?.contractAddress, args),
    () =>
      client
        ? client.bids({
            price: args.price,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export type KogenMarketsConfigQuery<TData> = KogenMarketsReactQuery<
  Config,
  TData
>;
export function useKogenMarketsConfigQuery<TData = Config>({
  client,
  options,
}: KogenMarketsConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(
    kogenMarketsQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface KogenMarketsExerciseMutation {
  client: KogenMarketsClient;
  msg: {
    expiryPrice: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKogenMarketsExerciseMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KogenMarketsExerciseMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, KogenMarketsExerciseMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.exercise(msg, fee, memo, funds),
    options
  );
}
export interface KogenMarketsBidOrderMutation {
  client: KogenMarketsClient;
  msg: {
    price: Uint128;
    quantity: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKogenMarketsBidOrderMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KogenMarketsBidOrderMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, KogenMarketsBidOrderMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.bidOrder(msg, fee, memo, funds),
    options
  );
}
export interface KogenMarketsAskOrderMutation {
  client: KogenMarketsClient;
  msg: {
    price: Uint128;
    quantity: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKogenMarketsAskOrderMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KogenMarketsAskOrderMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, KogenMarketsAskOrderMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.askOrder(msg, fee, memo, funds),
    options
  );
}
export interface KogenMarketsUpdateConfigMutation {
  client: KogenMarketsClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useKogenMarketsUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, KogenMarketsUpdateConfigMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, KogenMarketsUpdateConfigMutation>(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(fee, memo, funds),
    options
  );
}
